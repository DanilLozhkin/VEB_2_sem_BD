openapi: 3.0.0
info:
  title: Документация по API
  description: сервер для взаимодействия с БД моделями/пользователями
  version: 1.0.0
servers:
  - url: http://127.0.0.1:3000
paths:
  /:
    get:
      summary: Получить информацию о сервере
      description: Возвращает информацию о сервере
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Сообщение с информацией о сервере
                example:
                  message: Сервер работает
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
  
    delete:
      summary: Удаление API-ключа и всех связанных с ним моделей
      tags:
        - Users
      parameters:
        - name: apiKey
          in: query
          description: Ключ для удаления
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешный запрос
          content:
            text/plain:
              schema:
                type: string
                example: fin
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /models/{id}:
    get:
      summary: Получение модели по id
      tags:
        - Models
      parameters:
        - in: path
          name: id
          description: Идентификатор модели
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            text/html:
              schema:
                type: string
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

    put:
      summary: Обновление модели по id
      description: Обновляет модель с заданным ID в базе данных с помощью переданных параметров
      tags:
        - Models
      parameters:
        - in: path
          name: id
          required: true
          description: ID модели для обновления.
          schema:
            type: string
            format: ObjectId
        - in: query
          name: apiKey
          required: true
          description: API-ключ для авторизации.
          schema:
            type: string
      requestBody:
        description: Параметры для обновления модели.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model_2"
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model_2"
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
 
    delete:
      summary: Удаление модели по ее id
      tags:
        - Models
      parameters:
        - name: id
          in: path
          description: Идентификатор модели
          required: true
          schema:
            type: string
        - name: apiKey
          in: query
          description: Ключ авторизации
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Успешный запрос
          content:
            text/plain:
              schema:
                type: string
                example: fin
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
 

  /api-keys:
    post:
      summary: создание нового пользователя
      tags:
        - Users
      requestBody:
        description: Параметры для создания новой модели.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /models:
    get:
      summary: получение списка моделей
      tags:
        - Models
      operationId: getAllmodels
      responses: 
        '200':
          description: Успешный запрос
          content: 
            application/json:
              schema:
                $ref: "#/components/schemas/Models"
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
    post:
      summary: Создание новой модели
      description: Создает новую модель с заданными параметрами и сохраняет ее в базе данных.
      tags:
        - Models
      parameters:
        - in: query
          name: apiKey
          required: true
          description: API-ключ для авторизации.
          schema:
            type: string
      requestBody:
        description: Параметры для создания новой модели.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Model_2"
      responses:
        '200':
          description: Успешный запрос
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Model_2"
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
                
  /models/html:
    get:
      summary: Получение HTML-шаблона
      description: Этот маршрут используется для получения HTML-шаблона
      tags:
        - Models
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: apiKey
          required: true
          description: API-ключ для доступа к ресурсу
          schema:
            type: string
      responses:
        '200':
          description: Успешный ответ
          content:
            text/html:
              schema:
                type: string
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /models/normalize.css:
    get:
      summary: Отправка файла normalize.css
      tags:
        - Resources
      responses:
        '200':
          description: Файл успешно отправлен
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /models/style_2.css:
    get:
      summary: Отправка файла style_2.css
      tags:
        - Resources
      responses:
        '200':
          description: Файл успешно отправлен
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

  /models/three.js:
    get:
      summary: Отправка файла three.js
      tags:
        - Resources
      responses:
        '200':
          description: Файл успешно отправлен
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"
                
  /models/main_7.js:
    get:
      summary: Отправка файла main_7.js
      tags:
        - Resources
      responses:
        '200':
          description: Файл успешно отправлен
        'default':
          description: ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Errors"

          
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Model:
      type: object
      properties:
        _id:
          type: string
          example: 6451399259e055ce8839a99e
        name:
          type: string
          example: name
        name_Model:
          type: string
          example: name_model
        type:
          type: string
          enum:
            - BoxGeometry
            - PlaneGeometry
            - BufferGeometry
            - SphereGeometry
            - ConeBufferGeometry
            - TorusKnotGeometry
        value:
          type: object
          properties:
            vertex:
              type: string
              example: "1,2,3"
            color: 
              type: string
              example: "#0033ff"
        description:
          type: string
          example: что-то
        data_creat:
          type: string
          format: 2022-08-01T15:00:00+1
        data_update:
          type: string
          format: 2022-08-01T15:00:00+1
        key:
          type: string
          example: fd7d23b0

    Model_1:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/Model/properties/_id"
        name_Model:
          $ref: "#/components/schemas/Model/properties/name_Model"

    Model_2:
      type: object
      properties:
        name_Model:
          $ref: "#/components/schemas/Model/properties/name_Model"
        type:
          $ref: "#/components/schemas/Model/properties/type"
        vertex:
          $ref: "#/components/schemas/Model/properties/value/properties/vertex"
        color:
          $ref: "#/components/schemas/Model/properties/value/properties/color"
        description:
          $ref: "#/components/schemas/Model/properties/description"

    Models:
      type: array
      items:
        $ref: "#/components/schemas/Model_1"
    
    user:
      type: object
      properties:
        name:
          type: string
          example: deniel
    
    Errors:
      type: object
      required:
        - code
        - message
      properties:
        name:
          code: 
            type: integer
          message: 
            type: string